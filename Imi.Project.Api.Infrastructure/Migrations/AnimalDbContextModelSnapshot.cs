// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(AnimalDbContext))]
    partial class AnimalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BreedingId")
                        .HasColumnType("int");

                    b.Property<int>("ContinentId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("GhMax")
                        .HasColumnType("int");

                    b.Property<int>("GhMin")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KindId")
                        .HasColumnType("int");

                    b.Property<string>("NameDutch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhMax")
                        .HasColumnType("int");

                    b.Property<int>("PhMin")
                        .HasColumnType("int");

                    b.Property<int>("SocialId")
                        .HasColumnType("int");

                    b.Property<int>("TempMax")
                        .HasColumnType("int");

                    b.Property<int>("TempMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedingId");

                    b.HasIndex("ContinentId");

                    b.HasIndex("DietId");

                    b.HasIndex("KindId");

                    b.HasIndex("SocialId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreedingId = 1,
                            ContinentId = 1,
                            DietId = 1,
                            GhMax = 12,
                            GhMin = 8,
                            ImageUrl = "https://www.aquariumfans.nl/wp-content/uploads/2016/09/Een-kempvis-spreidt-zijn-prachtige-rode-vinnen.jpg",
                            KindId = 1,
                            NameDutch = "Betta Splendens",
                            NameFamily = "Osphronemidae",
                            PhMax = 8,
                            PhMin = 7,
                            SocialId = 1,
                            TempMax = 28,
                            TempMin = 20
                        },
                        new
                        {
                            Id = 2,
                            BreedingId = 2,
                            ContinentId = 4,
                            DietId = 3,
                            GhMax = 15,
                            GhMin = 5,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQzOSqOT7KqM_Dd81qqwWrPgkxCpF1AWq8LynTdeKWcV7DsJf8-qd7O2knrmu4nuz8k2dU&usqp=CAU",
                            KindId = 1,
                            NameDutch = "Ancistruss",
                            NameFamily = "Loricariidae",
                            PhMax = 8,
                            PhMin = 6,
                            SocialId = 2,
                            TempMax = 26,
                            TempMin = 23
                        },
                        new
                        {
                            Id = 3,
                            BreedingId = 6,
                            ContinentId = 1,
                            DietId = 9,
                            GhMax = 15,
                            GhMin = 5,
                            ImageUrl = "https://dennerle.com/sites/default/files/styles/newspicture/public/uploads/public/news/geosesarma-dennerle.jpg?itok=UlaS87qc",
                            KindId = 6,
                            NameDutch = "Vampierkrab",
                            NameFamily = "Sesarmidae",
                            PhMax = 8,
                            PhMin = 6,
                            SocialId = 3,
                            TempMax = 26,
                            TempMin = 23
                        },
                        new
                        {
                            Id = 4,
                            BreedingId = 6,
                            ContinentId = 4,
                            DietId = 8,
                            GhMax = 6,
                            GhMin = 2,
                            ImageUrl = "https://vissenaquarium.nl/wp-content/uploads/2016/05/Zilveren-Arowana-300x199.jpg",
                            KindId = 1,
                            NameDutch = "Zilveren Arowana",
                            NameFamily = "Osteoglossidae",
                            PhMax = 7,
                            PhMin = 6,
                            SocialId = 3,
                            TempMax = 28,
                            TempMin = 23
                        },
                        new
                        {
                            Id = 5,
                            BreedingId = 4,
                            ContinentId = 1,
                            DietId = 6,
                            GhMax = 30,
                            GhMin = 10,
                            ImageUrl = "https://www.azaqua.nl/14525-thickbox_default/neritina-waigiensis.jpg",
                            KindId = 4,
                            NameDutch = "Rode Neritina Slak",
                            NameFamily = "Neritidae",
                            PhMax = 9,
                            PhMin = 7,
                            SocialId = 3,
                            TempMax = 30,
                            TempMin = 20
                        },
                        new
                        {
                            Id = 6,
                            BreedingId = 3,
                            ContinentId = 2,
                            DietId = 6,
                            GhMax = 15,
                            GhMin = 5,
                            ImageUrl = "https://cdn.myonlinestore.eu/93c794e2-6be1-11e9-a722-44a8421b9960/image/cache/article/e19adb5fb7200b2ec41c5f5242733222e2f3ca6c.jpg",
                            KindId = 5,
                            NameDutch = "Dwergklauwkikker",
                            NameFamily = "Pipidae",
                            PhMax = 7,
                            PhMin = 5,
                            SocialId = 3,
                            TempMax = 27,
                            TempMin = 24
                        },
                        new
                        {
                            Id = 7,
                            BreedingId = 6,
                            ContinentId = 2,
                            DietId = 1,
                            GhMax = 20,
                            GhMin = 5,
                            ImageUrl = "https://www.garnalenkweker.nl/database/garnalenfotos/gk_shrimp_atya_gabonensis_02.jpg",
                            KindId = 2,
                            NameDutch = "Afrikaanse Waaierhandgarnaal",
                            NameFamily = "Atyidae",
                            PhMax = 8,
                            PhMin = 6,
                            SocialId = 4,
                            TempMax = 30,
                            TempMin = 20
                        },
                        new
                        {
                            Id = 8,
                            BreedingId = 6,
                            ContinentId = 6,
                            DietId = 1,
                            GhMax = 20,
                            GhMin = 5,
                            ImageUrl = "https://www.aquainfo.nl/wp-content/uploads/2018/03/Caridina-sp-Sulawesi-Kardinaal-Garnaal.jpg",
                            KindId = 2,
                            NameDutch = "Kardinaalgarnaal",
                            NameFamily = "Atyidae",
                            PhMax = 8,
                            PhMin = 6,
                            SocialId = 3,
                            TempMax = 25,
                            TempMin = 18
                        },
                        new
                        {
                            Id = 9,
                            BreedingId = 7,
                            ContinentId = 5,
                            DietId = 6,
                            GhMax = 7,
                            GhMin = 4,
                            ImageUrl = "https://aquainfo.nl/wp-content/uploads/2012/09/Diodon-holocanthus-opgezet-1.jpg",
                            KindId = 1,
                            NameDutch = "Ballonegelvis",
                            NameFamily = "Diodontidae",
                            PhMax = 9,
                            PhMin = 8,
                            SocialId = 1,
                            TempMax = 26,
                            TempMin = 23
                        },
                        new
                        {
                            Id = 10,
                            BreedingId = 3,
                            ContinentId = 1,
                            DietId = 6,
                            GhMax = 10,
                            GhMin = 3,
                            ImageUrl = "https://www.aquariumvissenwinkel.nl/pub/media/catalog/product/cache/6adf04d0a500106b8356e43536d091ec/g/a/galaxyrasbora2.jpg",
                            KindId = 1,
                            NameDutch = "Rasbora Galaxy",
                            NameFamily = "Cyprinidae",
                            PhMax = 8,
                            PhMin = 7,
                            SocialId = 6,
                            TempMax = 25,
                            TempMin = 20
                        },
                        new
                        {
                            Id = 11,
                            BreedingId = 4,
                            ContinentId = 7,
                            DietId = 6,
                            GhMax = 7,
                            GhMin = 5,
                            ImageUrl = "https://usercontent.one/wp/www.salamanders.nl/wp-content/uploads/2018/08/axolotl-1-1024x678.jpg",
                            KindId = 5,
                            NameDutch = "Axolotl",
                            NameFamily = "Gymnophiona",
                            PhMax = 8,
                            PhMin = 6,
                            SocialId = 1,
                            TempMax = 20,
                            TempMin = 14
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-1111-1111-1111-000000000001",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1985, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4ef543f6-20a4-435d-b3fe-8dfe368439e5",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.BE",
                            NormalizedUserName = "ADMIN@IMI.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcPC1O5OIPTf1UPfoi4UigDmwv001ZBeIA6oHExMfEnwVfgmyZQhH4eoL1laZYYsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82855de4-2699-409c-aa9e-426bf6dd73ad",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "admin@imi.be"
                        },
                        new
                        {
                            Id = "00000000-1111-1111-1111-000000000002",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1985, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a6a4703e-8c70-40b5-bd11-cda1be1a7e5f",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.BE",
                            NormalizedUserName = "USER@IMI.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLBN+xr4cd3OsgMYo50EK8BmqPxqtzv7imZ74wIoDuNwKopXkNn9NjfiowUtI3q4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e5afa49-5b79-4d3b-b2d8-35bbda250834",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "user@imi.be"
                        },
                        new
                        {
                            Id = "00000000-1111-1111-1111-000000000003",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1965, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "97b5c114-8f42-4c1f-b7c2-d7cb5039b989",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.BE",
                            NormalizedUserName = "REFUSER@IMI.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEH3BWSeNxRD9CCNMpByDHGMVAc+cHqBGyWER63Q3jI/V3kGFP+g5TIznJm83D+4jgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3406f134-0b4b-47c6-a9c6-a38a5fc352a0",
                            TermsAndConditions = false,
                            TwoFactorEnabled = false,
                            UserName = "refuser@imi.be"
                        },
                        new
                        {
                            Id = "00000000-1111-1111-1111-000000000004",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1985, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "128af8f2-454f-4d9y-91f7-fd72b5632d94",
                            Email = "mde-user@imi.be",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MDE-USER@IMI.BE",
                            NormalizedUserName = "MDE-USER@IMI.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAxb20ebTpJZUM1XcrLDg3DnsPAm3KszOR2YMcNoTWNZehH91CV/N6a3nlO8iYgk9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "704af8f2-454f-4c67-91f7-fd72b3082d94",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "mde-user@imi.be"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Breeding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Breedings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Schuimnestbouwer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Holenbroeder"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vrijlegger"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Substraatbroeder"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Muilbroeder"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Vrouwtje houdt bij"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Eierlevendbarend"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bodemleggers"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Koekoeksbroeders"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Mannetje houdt bij"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Continents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://www.landenkompas.nl/img/continenten/continent-azie.png",
                            Name = "Azië"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://www.landenkompas.nl/img/continenten/continent-afrika.png",
                            Name = "Afrika"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://www.landenkompas.nl/img/continenten/continent-noord-amerika.png",
                            Name = "Noord-Amerika"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://www.landenkompas.nl/img/continenten/continent-zuid-amerika.png",
                            Name = "Zuid-Amerika"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Atlantic_Ocean.png/266px-Atlantic_Ocean.png",
                            Name = "Atlantische Oceaan"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://www.landenkompas.nl/img/continenten/continent-oceanie.png",
                            Name = "Australië - Oceanië"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Middle_America_%28orthographic_projection%29.svg/266px-Middle_America_%28orthographic_projection%29.svg.png",
                            Name = "Midden-Amerika"
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://www.landenkompas.nl/img/continenten/continent-europa.png",
                            Name = "Europa"
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/LocationMadagascar.svg/1920px-LocationMadagascar.svg.png",
                            Name = "Madagaskar"
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Lake_Malawi_seen_from_orbit.jpg/266px-Lake_Malawi_seen_from_orbit.jpg",
                            Name = "Malawi"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Omnivoor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Herbivoor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Algentabletten"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Daphnia - Droogvoer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Spirulina - Droogvoer"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Carnivoor"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Artemia - Levend voer"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Levende vissen"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Muggenlarven - Levend voer"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Watervlooien"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Kinds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://img.pixers.pics/pho_wat(s3:700/FO/52/08/83/96/700_FO52088396_612b0a2384be2c002b7be437f3372043.jpg,700,494,cms:2018/10/5bd1b6b8d04b8_220x50-watermark.png,over,480,444,jpg)/stickers-leuke-cartoon-vis.jpg.jpg",
                            Name = "Vis"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://img.pixers.pics/pho_wat(s3:700/FO/45/52/09/12/700_FO45520912_f40c182c4c12dc9f2610125a81b8b8b3.jpg,700,540,cms:2018/10/5bd1b6b8d04b8_220x50-watermark.png,over,480,490,jpg)/fotobehang-grappige-garnalen-cartoon.jpg.jpg",
                            Name = "Garnaal"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://img.freepik.com/premium-vector/cartoon-kreeft-illustratie_29190-3564.jpg?w=2000",
                            Name = "Kreeft"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://img.freepik.com/premium-vector/schattige-cartoon-slak_160606-341.jpg?w=2000",
                            Name = "Slak"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://i.pinimg.com/originals/dd/f2/78/ddf2783a9bed5888963ecf47a8e6a53d.jpg",
                            Name = "Amfibiën"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://us.123rf.com/450wm/vectorcoolarts/vectorcoolarts2104/vectorcoolarts210400025/168293491-leuke-vrolijke-krab-cartoon-afbeelding.jpg?ver=6",
                            Name = "Krab"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://static.vecteezy.com/ti/gratis-vector/p3/1265646-schattig-blauw-zeepaardje-cartoon-vector.jpg",
                            Name = "Zeepaarden"
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://media.istockphoto.com/vectors/cartoon-happy-oyster-vector-id470840750?b=1&k=20&m=470840750&s=612x612&w=0&h=bN-iY22PQ9zgL2r1ZgtY6GJwnED_mC4CatojSiJ9Y-0=",
                            Name = "Schelpdieren"
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://img.freepik.com/premium-vector/gelukkig-schildpad-cartoon_160606-329.jpg?w=2000",
                            Name = "Schildpad"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Socials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Solitair"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Koppel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Groep"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Harem"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kolonie"
                        },
                        new
                        {
                            Id = 6,
                            Name = "School"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "10000000-0000-0000-0000-000000000001",
                            ConcurrencyStamp = "fa11930c-a975-4055-8792-7435755cf985",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "10000000-0000-0000-0000-000000000003",
                            ConcurrencyStamp = "716fdb58-cb05-4688-b4ee-4067131b049f",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "HasApprovedTermsAndConditions",
                            ClaimValue = "True",
                            UserId = "00000000-1111-1111-1111-000000000001"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "HasApprovedTermsAndConditions",
                            ClaimValue = "True",
                            UserId = "00000000-1111-1111-1111-000000000002"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "HasApprovedTermsAndConditions",
                            ClaimValue = "False",
                            UserId = "00000000-1111-1111-1111-000000000003"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "HasApprovedTermsAndConditions",
                            ClaimValue = "True",
                            UserId = "00000000-1111-1111-1111-000000000004"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "00000000-1111-1111-1111-000000000001",
                            RoleId = "10000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            UserId = "00000000-1111-1111-1111-000000000002",
                            RoleId = "10000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            UserId = "00000000-1111-1111-1111-000000000003",
                            RoleId = "10000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            UserId = "00000000-1111-1111-1111-000000000004",
                            RoleId = "10000000-0000-0000-0000-000000000001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Animal", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Breeding", "Breeding")
                        .WithMany("Animals")
                        .HasForeignKey("BreedingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Continent", "Continent")
                        .WithMany("Animals")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Diet", "Diet")
                        .WithMany("Animals")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Kind", "Kind")
                        .WithMany("Animals")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Social", "Social")
                        .WithMany("Animals")
                        .HasForeignKey("SocialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breeding");

                    b.Navigation("Continent");

                    b.Navigation("Diet");

                    b.Navigation("Kind");

                    b.Navigation("Social");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Breeding", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Continent", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Diet", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Kind", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Social", b =>
                {
                    b.Navigation("Animals");
                });
#pragma warning restore 612, 618
        }
    }
}
